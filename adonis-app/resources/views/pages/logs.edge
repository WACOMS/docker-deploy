@layout({ activePage: 'logs' })
@slot('content')
<div class="max-w-6xl mx-auto">
  <div class="flex items-center justify-between mb-8">
    <div>
      <h2 class="text-3xl font-bold text-white mb-2">Logs — {{ project.name }}</h2>
      <p class="text-gray-400">Visualisez les logs de déploiement et d'exécution pour ce projet</p>
    </div>

    <div>
      <button id="refreshBtn" class="inline-flex items-center px-4 py-2 bg-green-700 hover:bg-green-600 text-sm text-gray-200 rounded-sm border border-green-600">
        <i class="fas fa-sync-alt mr-2"></i>
        Rafraichir
      </button>
    </div>
  </div>

  @flashMessage('success')
  <div class="block mt-4 mb-6 p-4 w-full bg-green-900/20 border border-green-700 rounded-sm text-green-300">
    <i class="fas fa-check-circle mr-2"></i>
    {{ $message }}
  </div>
  @end

  @flashMessage('error')
  <div class="block mt-4 mb-6 p-4 w-full bg-red-900/20 border border-red-700 rounded-sm text-red-300">
    <i class="fas fa-exclamation-circle mr-2"></i>
    {{ $message }}
  </div>
  @end

  <div class="bg-dark-800 border border-dark-700 rounded-sm p-6">
    <div class="mb-4 text-sm text-gray-400 flex items-center justify-between">
      <div class="text-xs text-gray-400">
        Dernière mise à jour :
        @if(project.lastDeploy)
        @let(lastDeploy = project.lastDeploy.toRelative({ locale: "fr" }))
        <span class="text-gray-300">{{ lastDeploy }}</span>
        @else
        <span class="text-gray-500">Jamais</span>
        @end
      </div>
    </div>

    <div class="bg-black/60 border border-dark-600 rounded-sm p-4 h-[60vh] overflow-auto" id="logsContainer">
      <pre id="logsOutput" class="whitespace-pre-wrap text-xs leading-relaxed text-gray-200 font-mono m-0">
@if(logs)
{{ logs }}
@else
Aucun log disponible.
@end
          </pre>
    </div>
  </div>
</div>


@pushOnceTo('scripts')
<script defer>
  (function () {
    const container = document.getElementById('logsContainer');
    const output = document.getElementById('logsOutput');
    const refreshBtn = document.getElementById('refreshBtn');

    { /* changed: suppression du tailing par interval */ }
    async function fetchLogs() {
      if (!refreshBtn) return;
      refreshBtn.setAttribute('disabled', 'disabled');
      const originalLabel = refreshBtn.innerHTML;
      refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Chargement...';
      try {
        const res = await fetch('{{ route("project.logs.fetch", { id: project.id }) }}', {
          method: 'GET',
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        const responseText = await res.text();
        if (!res.ok) {
          output.textContent = "Erreur lors de la récupération des logs";
          console.error(responseText);
        } else {
          output.textContent = responseText;
        }
        container.scrollTo({
          top: container.scrollHeight,
          behavior: 'smooth'
        });
      } catch (err) {
        output.textContent = "Erreur réseau lors de la récupération des logs";
        console.error(err);
      } finally {
        refreshBtn.removeAttribute('disabled');
        refreshBtn.innerHTML = originalLabel;
      }
    }

    { /* changed: suppression de la logique d'interval et d'état tailing */ }

    // Attacher le clic du bouton pour rafraichir manuellement
    if (refreshBtn) {
      refreshBtn.addEventListener('click', fetchLogs);
    }

    // Optionnel : fetch initial pour remplir la zone au chargement
    fetchLogs();
  })();
</script>
@end
@end
@end